# Install required packages first if not installed
# pip install torch transformers

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
import json

# Device setup (CPU/GPU/MPS)
device = torch.device("cuda" if torch.cuda.is_available() else "mps" if torch.backends.mps.is_available() else "cpu")

# Load LiquidAI LFM2-350M model and tokenizer
model_name = "LiquidAI/LFM2-350M"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name).to(device)

# --------------------------
# Smart Farm Functions
# --------------------------
def turn_on_water_pump():
    """Turn on the water pump to start irrigation."""
    return {"status": "Water pump turned ON. Irrigation started."}

def turn_off_water_pump():
    """Turn off the water pump to stop irrigation."""
    return {"status": "Water pump turned OFF. Irrigation stopped."}

def check_moisture_level(moisture_level: int):
    """
    Checks the soil moisture level and determines if irrigation is needed.
    Args:
        moisture_level (int): The current soil moisture level (0-100%).
    Returns:
        dict: A status message indicating the action taken.
    """
    if moisture_level < 30:
        return {"status": f"Moisture level is low ({moisture_level}%). Turning on the water pump."}
    else:
        return {"status": f"Moisture level is sufficient ({moisture_level}%). No action needed."}

# Map function names to actual implementations
TOOLS = {
    "turn_on_water_pump": turn_on_water_pump,
    "turn_off_water_pump": turn_off_water_pump,
    "check_moisture_level": check_moisture_level,
}

# --------------------------
# Define tools JSON for LFM2
# --------------------------
tools_json = [
    {
        "name": "turn_on_water_pump",
        "description": "Turn on the water pump for irrigation.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        }
    },
    {
        "name": "turn_off_water_pump",
        "description": "Turn off the water pump to stop irrigation.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        }
    },
    {
        "name": "check_moisture_level",
        "description": "Checks the soil moisture level.",
        "parameters": {
            "type": "object",
            "properties": {
                "moisture_level": {"type": "integer", "description": "The current soil moisture level (0-100%)."}
            },
            "required": ["moisture_level"]
        }
    }
]

# --------------------------
# Smart Farm Assistant Loop
# --------------------------
def run_smart_farm():
    print("Welcome to Smart Farm Assistant! Type 'exit' to quit.\n")
    while True:
        user_input = input("User: ")
        if user_input.lower() == "exit":
            break

        # Construct prompt for LFM2 with tool definitions
        prompt = (
            "<|startoftext|><|im_start|>system\n"
            f"List of tools: <|tool_list_start|>{json.dumps(tools_json)}<|tool_list_end|><|im_end|>\n"
            f"<|im_start|>user\n{user_input}<|im_end|>\n<|im_start|>assistant\n"
        )

        inputs = tokenizer(prompt, return_tensors="pt").to(device)
        outputs = model.generate(**inputs, max_new_tokens=200)
        decoded = tokenizer.decode(outputs[0])

        # Extract function call if present
        if "<|tool_call_start|>" in decoded:
            start = decoded.index("<|tool_call_start|>") + len("<|tool_call_start|>")
            end = decoded.index("<|tool_call_end|>")
            func_call_str = decoded[start:end].strip()

            # Remove surrounding brackets if they exist
            if func_call_str.startswith("[") and func_call_str.endswith("]"):
                func_call_str = func_call_str[1:-1].strip()

            print(f"\n[Function call generated by LFM2]: {func_call_str}")

            try:
                # Parse function name and arguments
                func_name = func_call_str.split("(")[0]
                args_str = func_call_str.split("(")[1].rstrip(")")
                args_dict = {}
                if args_str:
                    for pair in args_str.split(","):
                        k, v = pair.split("=")
                        # Convert value to integer if it represents a number
                        if v.strip().isdigit():
                            args_dict[k.strip()] = int(v.strip())
                        else:
                            args_dict[k.strip()] = v.strip().strip('"')

                # Execute function
                if func_name in TOOLS:
                    result = TOOLS[func_name](**args_dict)
                    print(f"[Smart Farm System Response]: {result['status']}\n")
                else:
                    print(f"[Error]: Function '{func_name}' not found.\n")

            except Exception as e:
                print(f"[Error executing function]: {e}\n")
        else:
            print(f"[Assistant]: {decoded}\n")

if __name__ == "__main__":
    run_smart_farm()



# ml.g4dn.xlarge